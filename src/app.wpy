<style lang="less" src="./assets/style/common.less"></style>

<script>
import wepy from 'wepy';
import 'wepy-async-function';
import tip from '@/utils/tip';
export default class extends wepy.app {
  // 这里只能是静态数据
  config = {
    pages: [
      'pages/index',
      'pages/login',
      'pages/user/personal',
      'pages/user/feedback',
      'pages/auth',
      'pages/about'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '平台',
      navigationBarTextStyle: 'black'
    },
    tabBar: {
      selectedColor: '#4A4B5D',
      list: []
    },
    permission: {
      'scope.userLocation': {
        desc: '你的位置信息将用于记录您的位置！'
      }
    },
    debug: true
  };
  globalData = {
    userInfo: null,
    systemInfo: null,
    openId: null,
    unionId: null,
    token: '',
    apiHost: '',
    imgHost: '',
    uploadFileSize: 2048,
    uploadHost: ''
  };
  constructor() {
    super();
    this.use('requestfix');
    let self = this;
    this.intercept('request', {
      config(p) {
        if (!p.method) p.method = 'POST';
        if (!/(http:\/\/|https:\/\/)((\w|=|\?|\.|\/|&|-)+)/g.test(p.url)) {
          p.url = self.globalData.apiHost + p.url;
        }

        if (!p.data) {
          p.data = {};
        }
        p.data.token = self.globalData.token;
        return p;
      },
      success(p) {
        if (typeof p.data == 'string') {
          // 这里暂时有问题
          tip.errorToast('数据格式错误' + p.data);
          return false;
        }
        switch (p.data.ret) {
          case 200:
            return p.data.data;
          case 300:
            wx.removeStorage({
              key: 'token'
            })
            self.globalData.token = null;
            wepy.switchTab({
              url: '/pages/index'
            });
            return false;
          case 302:
            wepy.reLaunch({
              url: '/pages/bind'
            });
          default:
            if (p.data.ret) {
              tip.errorToast(p.data.msg);
              return false;
            }
            return p.data;
        }
      },
      fail(p) {
        tip.errorToast('网络错误');
        return p;
      }
    });

    this.intercept('uploadFile', {
      config(params) {
        params.name = 'file';
        if (!params.formData) {
          params.formData = {};
        }
        params.formData.token = self.globalData.token;
        return params;
      },
      success(res) {
        try {
          res.data = JSON.parse(res.data);
        } catch (e) {
          tip.errorToast('数据格式错误' + res.data);
          return false;
        }
        if (res.data.ret == 200 && res.data.data.url) {
          return res.data.data.url;
        } else {
          tip.errorToast('上传失败' + res.data.msg);
          return false;
        }
      },
      fail(res) {
        tip.errorToast('网络错误');
        return false;
      }
    });
    wx.getSystemInfo({
      success: function(res) {
        self.globalData.systemInfo = res;
      }
    });
  }

  async login(cb) {
    if (!this.globalData.token) {
      try {
        let info = wx.getStorageSync('token');
        if (info) {
          info = JSON.parse(info)
          let ctime = (new Date()).valueOf();
          if (ctime - info.time > 2 * 58 * 60 * 1000) {
            wx.removeStorage({
              key: 'token'
            })
            this.globalData.token = null
          } else {
            this.globalData.token = info.token;
          }
        }
      } catch (e) {
        this.globalData.token = null;
      }
    }
    if (this.globalData.token) {
      cb && cb(this.globalData);
      return true;
    }

    let isAuth = await new Promise((resolve,reject) => {
      wx.getSetting({
        success(res) {
          resolve(res.authSetting['scope.userInfo'])
        },
        fail() {
          resolve(false)
        }
      });
    })
    if (!isAuth) {
      wepy.reLaunch({
        url: '/pages/auth'
      });
      return false;
    }

    let self = this
    tip.showLoading();
    wepy.login({
      success:async function(res) {
        if (res.code) {
          let info = await self.getUserInfo()
          if (!info) {
            tip.errorToast('获取微信用户信息错误');
            return false;
          }
          wepy.request({
            url: 'worker_common/miniProgramLogin',
            data: {
              code: res.code,
              encrypted_data: info.encryptedData,
              iv: info.iv
            },
            success: function(res) {
              if (res) {
                self.globalData.token = res.token;
                wx.setStorage({
                  key: 'token',
                  data: {
                    time: (new Date()).valueOf(),
                    token: res.token
                  }
                })

                // 绑定
                if (res.uid == 0) {
                  wx.reLaunch({ url: '/pages/bind' });
                  return false;
                }
                cb && cb(self.globalData);
              }
            },
            complete() {
              tip.hideLoading();
            }
          });
        } else {
          tip.errorToast('登录失败，' + res.errMsg);
        }
      },
      fail() {
        tip.hideLoading();
      }
    });
  }


  getUserInfo() {
    if (this.globalData.userInfo) {
      return this.globalData.userInfo;
    }

    const self = this;
    return new Promise((resolve, reject) => {
      wepy.getUserInfo({
        success(res) {
          self.globalData.userInfo = res.userInfo;
          resolve(res)
        },
        fail () {
          resolve(false)
        }
      });
    })
  }

  async uploadFile(count = 9, sourceType = null) {
    let self = this;
    return new Promise((resolve, reject) => {
      wepy.chooseImage({
        count: count,
        sourceType: sourceType,
        success: function(res) {
          var num = 0;
          var result = [];
          res.tempFiles.forEach(async element => {
            if (self.globalData.uploadFileSize * 1024 < element.size) {
              tip.errorToast(
                '文件太大, 不能超过 ' +
                  self.globalData.uploadFileSize / 1024 +
                  'M.'
              );
              resolve(false);
            }

            tip.showLoading();
            let cresult = await new Promise((cresolve, creject) => {
              wepy.uploadFile({
                url: self.globalData.uploadHost,
                filePath: element.path,
                success: function(res) {
                  if (res) {
                    cresolve(res);
                  } else {
                    cresolve(false);
                  }
                },
                fail: function() {
                  cresolve(false);
                },
                complete: function() {
                  tip.hideLoading();
                }
              });
            });
            if (cresult) {
              result.push(cresult);
            } else {
              resolve(false);
            }

            ++num;
            if (num == res.tempFiles.length) {
              if (count == 1) {
                result = result[0];
              }
              resolve(result);
            }
          });
        },
        fail: function() {
          resolve(false);
        }
      });
    });
  }

  async getLocation() {
    return new Promise(function(resolve, reject) {
      tip.showLoading();
      wx.getLocation({
        type: 'gcj02',
        async success(res) {
          tip.hideLoading()
          let curPoint = {
            lat: res.latitude,
            lng: res.longitude
          };
          resolve(curPoint);
        },
        fail(res) {
          wepy.showModal({
            title: '提示',
            content: '需要获取您的地理位置，请确认授权!',
            showCancel: true,
            success: res => {
              if (!res.cancel) {
                wx.openSetting({
                  success: function(res) {
                    if (res.authSetting['scope.userLocation']) {
                      // 重新获取位置
                      wx.getLocation({
                        type: 'gcj02',
                        async success(res) {
                          let curPoint = {
                            lat: res.latitude,
                            lng: res.longitude
                          };
                          resolve(curPoint);
                        },
                        fail(res) {
                          resolve(false);
                        },
                        complete () {
                          tip.hideLoading()
                        }
                      });
                    } else {
                      tip.hideLoading()
                      resolve(false);
                    }
                  },
                  fail: function() {
                    tip.hideLoading()
                    resolve(false);
                  }
                });
              } else {
                tip.hideLoading()
                resolve(false);
              }
            },
            fail: res => {
              tip.hideLoading()
              resolve(false);
            }
          });
        }
      });
    });
  }
}
</script>